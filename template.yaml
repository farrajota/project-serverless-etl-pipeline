AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    A serverless ETL pipeline for storing and processing
    visitor gender page hits, coupled with a gender API 
    service to predict the visitor's gender using an ID.

###############################################################
Parameters:
###############################################################

    S3BucketFirehoseStreamName:
        Type: String
        Default: case-study-kinesis-firehose-stream
        Description: "S3 bucket to store the firehose stream data"

    S3BucketCompressedName:
        Type: String
        Default: case-study-stream-compressed
        Description: "S3 bucket to store the compressed stream data"

    FirehoseS3Prefix:
        Type: String
        Default: firehose/
        Description: "The S3 Key prefix for Kinesis Firehose."

    FirehoseCompressionFormat:
        Type: String
        Default: UNCOMPRESSED
        AllowedValues: [UNCOMPRESSED, GZIP, Snappy]
        Description: "Compression format used by Kinesis Firehose"

    FirehoseBufferingInterval:
        Type: Number
        Default: 60
        MinValue: 60
        MaxValue: 900
        Description: "How long Firehose will wait before writing a new batch into S3"

    FirehoseBufferingSize:
        Type: Number
        Default: 10
        MinValue: 1
        MaxValue: 128
        Description: "Maximum batch size in MB"

    FirehoseLambdaTimeout:
        Type: Number
        Default: 60
        MinValue: 5
        MaxValue: 900
        Description: "Maximum Lambda execution time in seconds"

    FirehoseLambdaMemorySize:
        Type: String
        Default: 128
        AllowedValues: [128,192,256,320,384,448,512,576,640,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408,1472,1536]

    DynamodbTableName:
        Type: String
        Default: case-study-project-dynamodb-gender
        Description: "Dynamodb's table name"

    DynamodbKeyElementName:
        Type: String
        Default: clientid
        Description: "Primary Key Name"

    DynamodbKeyElementType:
        Type: String
        Default: S
        AllowedPattern: '[S|N]'
        MinLength: '1'
        MaxLength: '1'
        ConstraintDescription: must be either S or N
        Description: "Primary Key Type"

    DynamodbReadCapacityUnits:
        Type: Number
        Default: '5'
        MinValue: '5'
        MaxValue: '10000'
        ConstraintDescription: must be between 5 and 10000
        Description: "Provisioned read throughput"

    DynamodbWriteCapacityUnits:
        Type: Number
        Default: '5'
        MinValue: '5'
        MaxValue: '10000'
        ConstraintDescription: must be between 5 and 10000
        Description: "Provisioned write throughput"

    ProcessLambdaTimeout:
        Type: Number
        Default: '300'
        MinValue: '5'
        MaxValue: '900'
        Description: "Maximum Lambda execution time in seconds"

    ProcessLambdaMemorySize:
        Type: Number
        Default: '256'
        AllowedValues: [128,192,256,320,384,448,512,576,640,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408,1472,1536]

    LambdaRate:
        Type: String
        Description: >
            The rate (frequency) that the top gender of the last 7 days
            is computed for visitors.
        Default: rate(1 minute)
        AllowedValues:
            - rate(1 minute)
            - rate(5 minute)
            - rate(10 minutes)
            - rate(60 minutes)
            - cron(0 1 * * ? *)  # 1am every day


###############################################################
Resources:
###############################################################

    S3BucketStoreFirehoseStream:
        Type: 'AWS::S3::Bucket'
        #DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            BucketName: !Ref S3BucketFirehoseStreamName

    S3BucketCompressed:
        Type: 'AWS::S3::Bucket'
        #DeletionPolicy: Retain
        Properties:
            AccessControl: Private
            BucketName: !Ref S3BucketCompressedName

    ########################################################
    ### Kinesis Firehose Stream
    ########################################################

    KinesisFirehoseDeliveryStream:
        Type: AWS::KinesisFirehose::DeliveryStream
        DependsOn:
            - FirehoseDeliveryPolicy
        Properties:
            DeliveryStreamName: case-study-kinesis_firehose_stream
            DeliveryStreamType: DirectPut
            ExtendedS3DestinationConfiguration:
                BucketARN: !GetAtt S3BucketStoreFirehoseStream.Arn
                BufferingHints:
                    IntervalInSeconds: !Ref FirehoseBufferingInterval
                    SizeInMBs: !Ref FirehoseBufferingSize
                CompressionFormat: !Ref FirehoseCompressionFormat
                Prefix: !Ref FirehoseS3Prefix
                RoleARN: !GetAtt FirehoseDeliveryRole.Arn
                ProcessingConfiguration:
                    Enabled: 'true'
                    Processors:
                        - Parameters:
                            - ParameterName: LambdaArn
                              ParameterValue: !GetAtt FirehoseStreamProcessFunction.Arn
                          Type: Lambda

    FirehoseDeliveryRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Sid: ''
                    Effect: Allow
                    Principal:
                        Service: firehose.amazonaws.com
                    Action: 'sts:AssumeRole'
                    Condition:
                        StringEquals:
                            'sts:ExternalId': !Ref 'AWS::AccountId'

    FirehoseDeliveryPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: firehose_delivery_policy
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                        - 'lambda:InvokeFunction'
                        - 's3:AbortMultipartUpload'
                        - 's3:GetBucketLocation'
                        - 's3:GetObject'
                        - 's3:ListBucket'
                        - 's3:ListBucketMultipartUploads'
                        - 's3:PutObject'
                    Resource:
                        - !GetAtt FirehoseStreamProcessFunction.Arn
                        - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !Ref S3BucketStoreFirehoseStream
                        - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !Ref S3BucketStoreFirehoseStream
                              - '*'
            Roles:
                - !Ref FirehoseDeliveryRole

    FirehoseStreamProcessFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: kinesis_firehose_stream_process/
            Handler: app.lambda_handler
            Runtime: python3.7
            Description: >-
                An Amazon Kinesis Firehose stream processor that appends a timestamp
                to input records.
            MemorySize: !Ref FirehoseLambdaMemorySize
            Timeout: !Ref FirehoseLambdaTimeout

    ########################################################
    ### Dynamodb
    ########################################################

    DynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Ref DynamodbTableName
            AttributeDefinitions:
              - AttributeName: !Ref DynamodbKeyElementName
                AttributeType: !Ref DynamodbKeyElementType
            KeySchema:
              - AttributeName: !Ref DynamodbKeyElementName
                KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: !Ref DynamodbReadCapacityUnits
                WriteCapacityUnits: !Ref DynamodbWriteCapacityUnits

    ########################################################
    ### Process stream data (parquet + update dynamodb)
    ########################################################

    ProcessStreamDataUpdateDynamodbFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: process_stream_data/
            Handler: app.lambda_handler
            Runtime: python3.7
            Description: >-
                Compresses the stream data into parquet format,
                processes the hits per client and updates the
                state of the dynamodb table. It is triggered by
                a object creation event in the S3 bucket where
                stream data is stored as an object/file.
            MemorySize: 256  #!Ref ProcessLambdaMemorySize
            Timeout: 300  #!Ref ProcessLambdaTimeout
            Environment:
                Variables:
                    S3_BUCKET_SOURCE: !Ref S3BucketFirehoseStreamName
                    S3_BUCKET_DEST: !Ref S3BucketCompressed
                    DYNAMODB_TABLE: !Ref DynamodbTableName
            Policies:
              - Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                        - "s3:PutObject"
                    Resource:
                        - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !Ref S3BucketCompressed
                              - '*'
                  - Effect: Allow
                    Action:
                        - "s3:Get*"
                        - "s3:List*"
                        - "s3:DeleteObject"
                    Resource:
                        - 'arn:aws:s3:::*'  #- !GetAtt S3BucketStoreFirehoseStream.Arn  #'arn:aws:s3:::*'
                  - Effect: Allow
                    Action:
                        - 'cloudwatch:PutMetricData'
                    Resource: '*'
                  - Effect: Allow
                    Action:
                        - "dynamodb:*"
                    Effect: "Allow"
                    Resource: !GetAtt DynamoDBTable.Arn
            Events:
                S3FileListener:
                    Type: S3
                    Properties:
                        Bucket: !Ref S3BucketStoreFirehoseStream
                        Events: s3:ObjectCreated:*

    ########################################################
    ### Schedule daily process of top gender last 7 days
    ########################################################

    ScheduledRule:
        Type: AWS::Events::Rule
        Properties:
            Description: "ScheduledRule"
            ScheduleExpression: !Ref LambdaRate
            State: "ENABLED"
            Targets:
              - Arn: !GetAtt TopGenderLast7DaysLambdaFunction.Arn #!Sub ${TopGenderLast7DaysLambdaFunction.Arn}
                Id: LambdaSchedule

    PermissionForEventsToInvokeLambda:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !GetAtt TopGenderLast7DaysLambdaFunction.Arn
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: !GetAtt ScheduledRule.Arn

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                            - lambda.amazonaws.com
                    Action:
                        - sts:AssumeRole
            Policies:
              - PolicyName: "root"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                            - "s3:PutObject"
                            - "s3:Get*"
                        Resource:
                          - !Join
                            - ''
                            - - 'arn:aws:s3:::'
                              - !Ref S3BucketCompressed
                              - '*'
                      - Effect: Allow
                        Action:
                            - "dynamodb:*"
                        Resource: !GetAtt DynamoDBTable.Arn
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    TopGenderLast7DaysLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: daily_process_lambda/
            Handler: app.lambda_handler
            Runtime: python3.7
            Description: >-
                Lambda function that processes the top gender per visitor
                in the last 7 days.
            Role: !GetAtt LambdaExecutionRole.Arn
            MemorySize: 128
            Timeout: 10
            Environment:
                Variables:
                    S3_BUCKET_SOURCE: !Ref S3BucketCompressedName
                    DYNAMODB_TABLE: !Ref DynamodbTableName
                    FIREHOSE_PREFIX: !Ref FirehoseS3Prefix

    ########################################################
    ### Gender API
    ########################################################

    GenderAPIFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: gender_api_lambda/
            Handler: app.lambda_handler
            Runtime: python3.7
            Environment:
                Variables:
                    DYNAMODB_TABLE: !Ref DynamodbTableName
            Policies:
              - Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                        - "dynamodb:GetItem"
                    Resource: !GetAtt DynamoDBTable.Arn
            Events:
                GetGender:
                    Type: Api
                    Properties:
                        Path: /gender/{clientid}
                        Method: get


###############################################################
Outputs:
###############################################################

    S3BucketNameKinesisFirehose:
        Description: "S3 bucket to store the streaming data from Kinesis Firehose"
        Value: !GetAtt S3BucketStoreFirehoseStream.Arn

    KinesisFirehoseDeliverStream:
        Description: "Kinesis Firehose Delivery Stream ARN"
        Value: !GetAtt KinesisFirehoseDeliveryStream.Arn

    Region:
        Description: "The region this template was launched in."
        Value: !Ref 'AWS::Region'

    FirehoseStreamProcessFunction:
        Description: "The Lambda Function that will process Firehose records"
        Value: !Ref FirehoseStreamProcessFunction

    DynamodbTable:
        Description: "Dynamodb Table ARN"
        Value: !GetAtt DynamoDBTable.Arn

    S3BucketCompressed:
        Description: "S3 bucket to store the compressed stream data"
        Value: !GetAtt S3BucketCompressed.Arn

    ProcessStreamDataFunction:
        Description: "Lambda function that will process and compress the stream data stored in S3"
        Value: !Ref ProcessStreamDataUpdateDynamodbFunction

    ComputeTopGenderLast7DaysLambdaFunction:
        Description: "Lambda function that will compute the top gender per visitor in the last 7 days"
        Value: !Ref TopGenderLast7DaysLambdaFunction

    GenderServicedApi:
      Description: "API Gateway endpoint URL for Prod stage for Hello World function"
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/gender/"
